class segmentTree{
    private:
        int n;
        vector<int>tree;

        int constructST(vector<int>&arr, int ss, int se, int si){
            if(ss==se){
                tree[si]=arr[ss];
                return tree[si];
            }

            int mid = (ss+se)/2;
            tree[si] = constructST(arr,ss,mid,2*si+1)+constructST(arr,mid+1,se,2*si+2);
            return tree[si];
        }

    public:
        segmentTree(){}

        segmentTree(vector<int>arr){
            n= arr.size();
            tree.resize(4*n);
            constructST(arr,0,n-1,0);
        }

        int sumRange(int qs, int qe, int ss, int se, int si){
            if(se<qs || ss>qe) return 0;
            if(qs<=ss && se<=qe) return tree[si];

            int mid = (ss+se)/2;
            return sumRange(qs,qe,ss,mid,2*si+1)+sumRange(qs,qe,mid+1,se,2*si+2);
        }

        void update(int index, int value, int ss, int se, int si){
            if(ss==se){
                tree[si]=value;
                return;
            }
            int mid = (ss+se)/2;
            if(index <= mid) update(index,value,ss,mid,2*si+1);
            else update(index,value,mid+1,se,2*si+2);
            tree[si]=tree[2*si+1]+tree[2*si+2];
        }
};


class NumArray {
public:
    int n;
    segmentTree st;
    NumArray(vector<int>& nums) {
        n = nums.size();
        st = segmentTree(nums);
    }
    
    void update(int index, int val) {
        st.update(index,val,0,n-1,0);
    }
    
    int sumRange(int left, int right) {
        return st.sumRange(left,right,0,n-1,0);
    }
};
